/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables.records


import com.pl.sggw.ecommers.jooq.tables.Cart

import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CartRecord() : UpdatableRecordImpl<CartRecord>(Cart.CART), Record4<String?, Long?, BigDecimal?, LocalDateTime?> {

    var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var customerId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var cartValue: BigDecimal?
        set(value) = set(2, value)
        get() = get(2) as BigDecimal?

    var creationTimestamp: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, Long?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row4<String?, Long?, BigDecimal?, LocalDateTime?>
    override fun valuesRow(): Row4<String?, Long?, BigDecimal?, LocalDateTime?> = super.valuesRow() as Row4<String?, Long?, BigDecimal?, LocalDateTime?>
    override fun field1(): Field<String?> = Cart.CART.ID
    override fun field2(): Field<Long?> = Cart.CART.CUSTOMER_ID
    override fun field3(): Field<BigDecimal?> = Cart.CART.CART_VALUE
    override fun field4(): Field<LocalDateTime?> = Cart.CART.CREATION_TIMESTAMP
    override fun component1(): String? = id
    override fun component2(): Long? = customerId
    override fun component3(): BigDecimal? = cartValue
    override fun component4(): LocalDateTime? = creationTimestamp
    override fun value1(): String? = id
    override fun value2(): Long? = customerId
    override fun value3(): BigDecimal? = cartValue
    override fun value4(): LocalDateTime? = creationTimestamp

    override fun value1(value: String?): CartRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): CartRecord {
        this.customerId = value
        return this
    }

    override fun value3(value: BigDecimal?): CartRecord {
        this.cartValue = value
        return this
    }

    override fun value4(value: LocalDateTime?): CartRecord {
        this.creationTimestamp = value
        return this
    }

    override fun values(value1: String?, value2: Long?, value3: BigDecimal?, value4: LocalDateTime?): CartRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised CartRecord
     */
    constructor(id: String? = null, customerId: Long? = null, cartValue: BigDecimal? = null, creationTimestamp: LocalDateTime? = null): this() {
        this.id = id
        this.customerId = customerId
        this.cartValue = cartValue
        this.creationTimestamp = creationTimestamp
    }
}
