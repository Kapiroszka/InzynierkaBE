/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables


import com.pl.sggw.ecommers.jooq.Public
import com.pl.sggw.ecommers.jooq.keys.CART_PKEY
import com.pl.sggw.ecommers.jooq.keys.CART__CART_CUSTOMER_ID_FKEY
import com.pl.sggw.ecommers.jooq.tables.records.CartRecord

import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Cart(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CartRecord>?,
    aliased: Table<CartRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CartRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cart</code>
         */
        val CART = Cart()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CartRecord> = CartRecord::class.java

    /**
     * The column <code>public.cart.id</code>.
     */
    val ID: TableField<CartRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "")

    /**
     * The column <code>public.cart.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<CartRecord, Long?> = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.cart.cart_value</code>.
     */
    val CART_VALUE: TableField<CartRecord, BigDecimal?> = createField(DSL.name("cart_value"), SQLDataType.NUMERIC(18, 2).nullable(false), this, "")

    /**
     * The column <code>public.cart.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<CartRecord, LocalDateTime?> = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CartRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CartRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cart</code> table reference
     */
    constructor(): this(DSL.name("cart"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CartRecord>): this(Internal.createPathAlias(child, key), child, key, CART, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CartRecord> = CART_PKEY
    override fun getKeys(): List<UniqueKey<CartRecord>> = listOf(CART_PKEY)
    override fun getReferences(): List<ForeignKey<CartRecord, *>> = listOf(CART__CART_CUSTOMER_ID_FKEY)

    private lateinit var _customer: Customer
    fun customer(): Customer {
        if (!this::_customer.isInitialized)
            _customer = Customer(this, CART__CART_CUSTOMER_ID_FKEY)

        return _customer;
    }
    override fun `as`(alias: String): Cart = Cart(DSL.name(alias), this)
    override fun `as`(alias: Name): Cart = Cart(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Cart = Cart(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Cart = Cart(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<String?, Long?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row4<String?, Long?, BigDecimal?, LocalDateTime?>
}
