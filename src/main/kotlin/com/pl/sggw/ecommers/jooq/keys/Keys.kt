/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.keys


import com.pl.sggw.ecommers.jooq.tables.Cart
import com.pl.sggw.ecommers.jooq.tables.CartProduct
import com.pl.sggw.ecommers.jooq.tables.Category
import com.pl.sggw.ecommers.jooq.tables.Customer
import com.pl.sggw.ecommers.jooq.tables.Product
import com.pl.sggw.ecommers.jooq.tables.StockPurchase
import com.pl.sggw.ecommers.jooq.tables.records.CartProductRecord
import com.pl.sggw.ecommers.jooq.tables.records.CartRecord
import com.pl.sggw.ecommers.jooq.tables.records.CategoryRecord
import com.pl.sggw.ecommers.jooq.tables.records.CustomerRecord
import com.pl.sggw.ecommers.jooq.tables.records.ProductRecord
import com.pl.sggw.ecommers.jooq.tables.records.StockPurchaseRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val CART_PKEY: UniqueKey<CartRecord> = Internal.createUniqueKey(Cart.CART, DSL.name("cart_pkey"), arrayOf(Cart.CART.ID), true)
val CART_PRODUCT_PKEY: UniqueKey<CartProductRecord> = Internal.createUniqueKey(CartProduct.CART_PRODUCT, DSL.name("cart_product_pkey"), arrayOf(CartProduct.CART_PRODUCT.ID), true)
val CATEGORY_PKEY: UniqueKey<CategoryRecord> = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), arrayOf(Category.CATEGORY.ID), true)
val CATEGORY_TREEREPRESENTAION_KEY: UniqueKey<CategoryRecord> = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_treerepresentaion_key"), arrayOf(Category.CATEGORY.TREEREPRESENTAION), true)
val CUSTOMER_PKEY: UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), arrayOf(Customer.CUSTOMER.ID), true)
val CUSTOMER_USER_EMAIL_KEY: UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_user_email_key"), arrayOf(Customer.CUSTOMER.USER_EMAIL), true)
val PRODUCT_NAME_KEY: UniqueKey<ProductRecord> = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_name_key"), arrayOf(Product.PRODUCT.NAME), true)
val PRODUCT_PKEY: UniqueKey<ProductRecord> = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pkey"), arrayOf(Product.PRODUCT.ID), true)
val STOCK_PURCHASE_PKEY: UniqueKey<StockPurchaseRecord> = Internal.createUniqueKey(StockPurchase.STOCK_PURCHASE, DSL.name("stock_purchase_pkey"), arrayOf(StockPurchase.STOCK_PURCHASE.ID), true)
val STOCK_PURCHASE_PRODUCT_ID_KEY: UniqueKey<StockPurchaseRecord> = Internal.createUniqueKey(StockPurchase.STOCK_PURCHASE, DSL.name("stock_purchase_product_id_key"), arrayOf(StockPurchase.STOCK_PURCHASE.PRODUCT_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val CART__CART_CUSTOMER_ID_FKEY: ForeignKey<CartRecord, CustomerRecord> = Internal.createForeignKey(Cart.CART, DSL.name("cart_customer_id_fkey"), arrayOf(Cart.CART.CUSTOMER_ID), com.pl.sggw.ecommers.jooq.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.ID), true)
val CART_PRODUCT__CART_PRODUCT_CART_ID_FKEY: ForeignKey<CartProductRecord, CartRecord> = Internal.createForeignKey(CartProduct.CART_PRODUCT, DSL.name("cart_product_cart_id_fkey"), arrayOf(CartProduct.CART_PRODUCT.CART_ID), com.pl.sggw.ecommers.jooq.keys.CART_PKEY, arrayOf(Cart.CART.ID), true)
val CART_PRODUCT__CART_PRODUCT_PRODUCT_ID_FKEY: ForeignKey<CartProductRecord, ProductRecord> = Internal.createForeignKey(CartProduct.CART_PRODUCT, DSL.name("cart_product_product_id_fkey"), arrayOf(CartProduct.CART_PRODUCT.PRODUCT_ID), com.pl.sggw.ecommers.jooq.keys.PRODUCT_PKEY, arrayOf(Product.PRODUCT.ID), true)
val PRODUCT__PRODUCT_CATEGORY_ID_FKEY: ForeignKey<ProductRecord, CategoryRecord> = Internal.createForeignKey(Product.PRODUCT, DSL.name("product_category_id_fkey"), arrayOf(Product.PRODUCT.CATEGORY_ID), com.pl.sggw.ecommers.jooq.keys.CATEGORY_TREEREPRESENTAION_KEY, arrayOf(Category.CATEGORY.TREEREPRESENTAION), true)
val STOCK_PURCHASE__STOCK_PURCHASE_PRODUCT_ID_FKEY: ForeignKey<StockPurchaseRecord, ProductRecord> = Internal.createForeignKey(StockPurchase.STOCK_PURCHASE, DSL.name("stock_purchase_product_id_fkey"), arrayOf(StockPurchase.STOCK_PURCHASE.PRODUCT_ID), com.pl.sggw.ecommers.jooq.keys.PRODUCT_PKEY, arrayOf(Product.PRODUCT.ID), true)
