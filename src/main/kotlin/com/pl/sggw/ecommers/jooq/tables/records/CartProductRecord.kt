/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables.records


import com.pl.sggw.ecommers.jooq.tables.CartProduct

import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CartProductRecord() : UpdatableRecordImpl<CartProductRecord>(CartProduct.CART_PRODUCT), Record6<Long?, Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var cartId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var productId: Long?
        set(value) = set(2, value)
        get() = get(2) as Long?

    var quantity: BigDecimal?
        set(value) = set(3, value)
        get() = get(3) as BigDecimal?

    var pricePerItem: BigDecimal?
        set(value) = set(4, value)
        get() = get(4) as BigDecimal?

    var creationTimestamp: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row6<Long?, Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?>
    override fun valuesRow(): Row6<Long?, Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?> = super.valuesRow() as Row6<Long?, Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?>
    override fun field1(): Field<Long?> = CartProduct.CART_PRODUCT.ID
    override fun field2(): Field<Long?> = CartProduct.CART_PRODUCT.CART_ID
    override fun field3(): Field<Long?> = CartProduct.CART_PRODUCT.PRODUCT_ID
    override fun field4(): Field<BigDecimal?> = CartProduct.CART_PRODUCT.QUANTITY
    override fun field5(): Field<BigDecimal?> = CartProduct.CART_PRODUCT.PRICE_PER_ITEM
    override fun field6(): Field<LocalDateTime?> = CartProduct.CART_PRODUCT.CREATION_TIMESTAMP
    override fun component1(): Long? = id
    override fun component2(): Long? = cartId
    override fun component3(): Long? = productId
    override fun component4(): BigDecimal? = quantity
    override fun component5(): BigDecimal? = pricePerItem
    override fun component6(): LocalDateTime? = creationTimestamp
    override fun value1(): Long? = id
    override fun value2(): Long? = cartId
    override fun value3(): Long? = productId
    override fun value4(): BigDecimal? = quantity
    override fun value5(): BigDecimal? = pricePerItem
    override fun value6(): LocalDateTime? = creationTimestamp

    override fun value1(value: Long?): CartProductRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): CartProductRecord {
        this.cartId = value
        return this
    }

    override fun value3(value: Long?): CartProductRecord {
        this.productId = value
        return this
    }

    override fun value4(value: BigDecimal?): CartProductRecord {
        this.quantity = value
        return this
    }

    override fun value5(value: BigDecimal?): CartProductRecord {
        this.pricePerItem = value
        return this
    }

    override fun value6(value: LocalDateTime?): CartProductRecord {
        this.creationTimestamp = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: BigDecimal?, value5: BigDecimal?, value6: LocalDateTime?): CartProductRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised CartProductRecord
     */
    constructor(id: Long? = null, cartId: Long? = null, productId: Long? = null, quantity: BigDecimal? = null, pricePerItem: BigDecimal? = null, creationTimestamp: LocalDateTime? = null): this() {
        this.id = id
        this.cartId = cartId
        this.productId = productId
        this.quantity = quantity
        this.pricePerItem = pricePerItem
        this.creationTimestamp = creationTimestamp
    }
}
