/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables


import com.pl.sggw.ecommers.jooq.Public
import com.pl.sggw.ecommers.jooq.keys.PRODUCT_NAME_KEY
import com.pl.sggw.ecommers.jooq.keys.PRODUCT_PKEY
import com.pl.sggw.ecommers.jooq.keys.PRODUCT__PRODUCT_CATEGORY_ID_FKEY
import com.pl.sggw.ecommers.jooq.tables.records.ProductRecord

import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Product(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductRecord>?,
    aliased: Table<ProductRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.product</code>
         */
        val PRODUCT = Product()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductRecord> = ProductRecord::class.java

    /**
     * The column <code>public.product.id</code>.
     */
    val ID: TableField<ProductRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.product.name</code>.
     */
    val NAME: TableField<ProductRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(126), this, "")

    /**
     * The column <code>public.product.description</code>.
     */
    val DESCRIPTION: TableField<ProductRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(512), this, "")

    /**
     * The column <code>public.product.category_id</code>.
     */
    val CATEGORY_ID: TableField<ProductRecord, String?> = createField(DSL.name("category_id"), SQLDataType.VARCHAR(12).nullable(false), this, "")

    /**
     * The column <code>public.product.sale_price</code>.
     */
    val SALE_PRICE: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("sale_price"), SQLDataType.NUMERIC(18, 2).nullable(false), this, "")

    /**
     * The column <code>public.product.promotional_price</code>.
     */
    val PROMOTIONAL_PRICE: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("promotional_price"), SQLDataType.NUMERIC(18, 2), this, "")

    /**
     * The column <code>public.product.quantity</code>.
     */
    val QUANTITY: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("quantity"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column <code>public.product.image</code>.
     */
    val IMAGE: TableField<ProductRecord, ByteArray?> = createField(DSL.name("image"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>public.product.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<ProductRecord, LocalDateTime?> = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.product.modification_timestamp</code>.
     */
    val MODIFICATION_TIMESTAMP: TableField<ProductRecord, LocalDateTime?> = createField(DSL.name("modification_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ProductRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product</code> table reference
     */
    constructor(): this(DSL.name("product"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProductRecord>): this(Internal.createPathAlias(child, key), child, key, PRODUCT, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<ProductRecord, Long?> = super.getIdentity() as Identity<ProductRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ProductRecord> = PRODUCT_PKEY
    override fun getKeys(): List<UniqueKey<ProductRecord>> = listOf(PRODUCT_PKEY, PRODUCT_NAME_KEY)
    override fun getReferences(): List<ForeignKey<ProductRecord, *>> = listOf(PRODUCT__PRODUCT_CATEGORY_ID_FKEY)

    private lateinit var _category: Category
    fun category(): Category {
        if (!this::_category.isInitialized)
            _category = Category(this, PRODUCT__PRODUCT_CATEGORY_ID_FKEY)

        return _category;
    }
    override fun `as`(alias: String): Product = Product(DSL.name(alias), this)
    override fun `as`(alias: Name): Product = Product(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Product = Product(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Product = Product(name, null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Long?, String?, String?, String?, BigDecimal?, BigDecimal?, BigDecimal?, ByteArray?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row10<Long?, String?, String?, String?, BigDecimal?, BigDecimal?, BigDecimal?, ByteArray?, LocalDateTime?, LocalDateTime?>
}
