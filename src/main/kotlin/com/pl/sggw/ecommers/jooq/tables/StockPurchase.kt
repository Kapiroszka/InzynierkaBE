/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables


import com.pl.sggw.ecommers.jooq.Public
import com.pl.sggw.ecommers.jooq.keys.STOCK_PURCHASE_PKEY
import com.pl.sggw.ecommers.jooq.keys.STOCK_PURCHASE_PRODUCT_ID_KEY
import com.pl.sggw.ecommers.jooq.keys.STOCK_PURCHASE__STOCK_PURCHASE_PRODUCT_ID_FKEY
import com.pl.sggw.ecommers.jooq.tables.records.StockPurchaseRecord

import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StockPurchase(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StockPurchaseRecord>?,
    aliased: Table<StockPurchaseRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StockPurchaseRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.stock_purchase</code>
         */
        val STOCK_PURCHASE = StockPurchase()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StockPurchaseRecord> = StockPurchaseRecord::class.java

    /**
     * The column <code>public.stock_purchase.id</code>.
     */
    val ID: TableField<StockPurchaseRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.stock_purchase.product_id</code>.
     */
    val PRODUCT_ID: TableField<StockPurchaseRecord, Long?> = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.stock_purchase.quantity</code>.
     */
    val QUANTITY: TableField<StockPurchaseRecord, BigDecimal?> = createField(DSL.name("quantity"), SQLDataType.NUMERIC, this, "")

    /**
     * The column <code>public.stock_purchase.price_per_item</code>.
     */
    val PRICE_PER_ITEM: TableField<StockPurchaseRecord, BigDecimal?> = createField(DSL.name("price_per_item"), SQLDataType.NUMERIC(18, 2).nullable(false), this, "")

    /**
     * The column <code>public.stock_purchase.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<StockPurchaseRecord, LocalDateTime?> = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<StockPurchaseRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StockPurchaseRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.stock_purchase</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.stock_purchase</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.stock_purchase</code> table reference
     */
    constructor(): this(DSL.name("stock_purchase"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StockPurchaseRecord>): this(Internal.createPathAlias(child, key), child, key, STOCK_PURCHASE, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<StockPurchaseRecord, Long?> = super.getIdentity() as Identity<StockPurchaseRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<StockPurchaseRecord> = STOCK_PURCHASE_PKEY
    override fun getKeys(): List<UniqueKey<StockPurchaseRecord>> = listOf(STOCK_PURCHASE_PKEY, STOCK_PURCHASE_PRODUCT_ID_KEY)
    override fun getReferences(): List<ForeignKey<StockPurchaseRecord, *>> = listOf(STOCK_PURCHASE__STOCK_PURCHASE_PRODUCT_ID_FKEY)

    private lateinit var _product: Product
    fun product(): Product {
        if (!this::_product.isInitialized)
            _product = Product(this, STOCK_PURCHASE__STOCK_PURCHASE_PRODUCT_ID_FKEY)

        return _product;
    }
    override fun `as`(alias: String): StockPurchase = StockPurchase(DSL.name(alias), this)
    override fun `as`(alias: Name): StockPurchase = StockPurchase(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): StockPurchase = StockPurchase(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): StockPurchase = StockPurchase(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row5<Long?, Long?, BigDecimal?, BigDecimal?, LocalDateTime?>
}
