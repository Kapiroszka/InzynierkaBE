/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.ecommers.jooq.tables.records


import com.pl.sggw.ecommers.jooq.tables.Customer

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerRecord() : UpdatableRecordImpl<CustomerRecord>(Customer.CUSTOMER), Record9<Long?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var userEmail: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var password: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var name: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var city: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var street: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var postCode: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var creationTimestamp: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    var modificationTimestamp: LocalDateTime?
        set(value) = set(8, value)
        get() = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Long?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row9<Long?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row9<Long?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row9<Long?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Long?> = Customer.CUSTOMER.ID
    override fun field2(): Field<String?> = Customer.CUSTOMER.USER_EMAIL
    override fun field3(): Field<String?> = Customer.CUSTOMER.PASSWORD
    override fun field4(): Field<String?> = Customer.CUSTOMER.NAME
    override fun field5(): Field<String?> = Customer.CUSTOMER.CITY
    override fun field6(): Field<String?> = Customer.CUSTOMER.STREET
    override fun field7(): Field<String?> = Customer.CUSTOMER.POST_CODE
    override fun field8(): Field<LocalDateTime?> = Customer.CUSTOMER.CREATION_TIMESTAMP
    override fun field9(): Field<LocalDateTime?> = Customer.CUSTOMER.MODIFICATION_TIMESTAMP
    override fun component1(): Long? = id
    override fun component2(): String? = userEmail
    override fun component3(): String? = password
    override fun component4(): String? = name
    override fun component5(): String? = city
    override fun component6(): String? = street
    override fun component7(): String? = postCode
    override fun component8(): LocalDateTime? = creationTimestamp
    override fun component9(): LocalDateTime? = modificationTimestamp
    override fun value1(): Long? = id
    override fun value2(): String? = userEmail
    override fun value3(): String? = password
    override fun value4(): String? = name
    override fun value5(): String? = city
    override fun value6(): String? = street
    override fun value7(): String? = postCode
    override fun value8(): LocalDateTime? = creationTimestamp
    override fun value9(): LocalDateTime? = modificationTimestamp

    override fun value1(value: Long?): CustomerRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): CustomerRecord {
        this.userEmail = value
        return this
    }

    override fun value3(value: String?): CustomerRecord {
        this.password = value
        return this
    }

    override fun value4(value: String?): CustomerRecord {
        this.name = value
        return this
    }

    override fun value5(value: String?): CustomerRecord {
        this.city = value
        return this
    }

    override fun value6(value: String?): CustomerRecord {
        this.street = value
        return this
    }

    override fun value7(value: String?): CustomerRecord {
        this.postCode = value
        return this
    }

    override fun value8(value: LocalDateTime?): CustomerRecord {
        this.creationTimestamp = value
        return this
    }

    override fun value9(value: LocalDateTime?): CustomerRecord {
        this.modificationTimestamp = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: String?, value6: String?, value7: String?, value8: LocalDateTime?, value9: LocalDateTime?): CustomerRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(id: Long? = null, userEmail: String? = null, password: String? = null, name: String? = null, city: String? = null, street: String? = null, postCode: String? = null, creationTimestamp: LocalDateTime? = null, modificationTimestamp: LocalDateTime? = null): this() {
        this.id = id
        this.userEmail = userEmail
        this.password = password
        this.name = name
        this.city = city
        this.street = street
        this.postCode = postCode
        this.creationTimestamp = creationTimestamp
        this.modificationTimestamp = modificationTimestamp
    }
}
